#include <linux/miscdevice.h>
#include <linux/delay.h>
#include <asm/irq.h>
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/mm.h>
#include <linux/fs.h>
#include <linux/types.h>
#include <linux/delay.h>
#include <linux/moduleparam.h>
#include <linux/slab.h>
#include <linux/errno.h>
#include <linux/ioctl.h>
#include <linux/cdev.h>
#include <linux/string.h>
#include <linux/list.h>
#include <linux/pci.h>
#include <asm/uaccess.h>
#include <asm/atomic.h>
#include <asm/unistd.h>

static int leds_ioctl(struct inode *inode, struct file *filp, unsigned int cmd, unsigned long arg)
{
	printk ("misc  leds_ioctl\n");
	return 0;
}

static int leds_open(struct inode *inode, struct file *filp)
{
	printk ("misc  in leds_open\n");
	return 0;
}
static int leds_release(struct inode *inode, struct file *filp)
{
	printk ("misc leds_release\n");
	return 0;
}

static ssize_t leds_read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos)
{
      printk ("misc leds_read\n");
	  return 1;
}

static struct file_operations leds_fops =
{
	.owner   = THIS_MODULE,
	.read    = leds_read,
	.ioctl   = leds_ioctl,
	.open    = leds_open,
	.release = leds_release
};

static struct miscdevice misc = {
	.minor = MISC_DYNAMIC_MINOR,
	.name = "misc_leds", //此名称将显示在/dev目录下面
	.fops = &leds_fops,
};

static int __init dev_init(void)
{
	int ret = misc_register(&misc);
	printk ("misc leds initialized\n");
	return ret;
}

static void __exit dev_exit(void)
{
	misc_deregister(&misc);
	printk("misc leds unloaded\n");
}

module_init(dev_init);
module_exit(dev_exit);
MODULE_LICENSE("GPL");
MODULE_AUTHOR("suiyuan");
